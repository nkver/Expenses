@using Tewr.Blazor.FileReader;
@using Domain.Models;
@using Infrastructure.Logic;
@inject IFileReaderService fileReaderService;
@inject ExpensesData _data;

<style>
    .@dropContainerStyle {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }
    .@dropContainerHoverStyle {
        border-color: orangered;
        font-weight: bold;
    }
    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
</style>

<div class="@DropContainerActiveStyle">
    <input type="file"
           class="clickable"
           @ref=inputFile
           @oninput="OnInputChange"
           @ondragenter=OnHoverEnter
           @ondragleave=OnHoverLeave
           multiple />
    Drag and drop file(s) here. Or click to select file(s) from your system

    @foreach (var file in CurrentFileList)
    {
        <br />@file.Name
    }
</div>
<p>@Output</p>
<button @onclick="WriteClick" class="btn btn-primary">Write</button>
<button @onclick="ClearClick" class="btn btn-primary">Clear</button>
<br />
<p>New records added: @_records.Count()</p>

@code {

    [Parameter] public Transactions Parent { get; set; }
    //ElementReference dropTargetElement;
    ElementReference inputFile;
    IFileReaderRef newFileList;
    List<IFileInfo> CurrentFileList { get; } = new List<IFileInfo>();
    private List<Transaction> _records = new List<Transaction>();

    const string dropContainerStyle = "drop-container";
    const string dropContainerHoverStyle = "hover-over-drop-container";

    private List<string> _activeStyling = new List<string>() { dropContainerStyle };
    string DropContainerActiveStyle => string.Join(" ", _activeStyling);

    string Output { get; set; } = "No file(s) selected";

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            newFileList = fileReaderService.CreateReference(inputFile);
            this.StateHasChanged();
        }
    }

    public async Task OnInputChange(EventArgs e)
    {
        _activeStyling.Remove(dropContainerHoverStyle);
        this.StateHasChanged();
        await this.RefreshCurrentFileList(newFileList, CurrentFileList);
    }

    public async Task WriteClick()
    {
        await WriteFile(newFileList);
    }

    public async Task WriteFile(IFileReaderRef fileList)
    {
        foreach (var file in await fileList.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            Output = $"Writing file {fileInfo.Name} to database";
            this.StateHasChanged();

            using (var stream = await file.CreateMemoryStreamAsync(4096))
            {
                await _data.AddTransactions(stream);
                Output = $"Done writing file {fileInfo.Name} to database. Refresh tab to see results.";
            }
            this.StateHasChanged();
            await Parent.GetTransactionsAsync();
        }
    }

    public async Task ClearClick()
    {
        await newFileList.ClearValue();
        CurrentFileList.Clear();
        Output = "Cleared files";
        this.StateHasChanged();
    }

    private async Task RefreshCurrentFileList(IFileReaderRef newFileList, List<IFileInfo> currentList)
    {
        currentList.Clear();
        foreach (var file in await newFileList.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            currentList.Add(fileInfo);

        }
        Output = "Added file";
        this.StateHasChanged();
    }

    public void OnHoverEnter(EventArgs e)
    {
        _activeStyling.Add(dropContainerHoverStyle);
    }

    public void OnHoverLeave(EventArgs e)
    {
        _activeStyling.Remove(dropContainerHoverStyle);
    }

}

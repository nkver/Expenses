@page "/config"
@using Domain.Models;
@using Infrastructure.Logic;
@inject ExpensesData _data;

<h2>Config</h2>

<table class="table" width="100%" >
    <thead>
        <tr>
            <th>Categories</th>
            <th />
            <th />
        </tr>
    </thead>
    <tbody>
        @foreach (var category in categories)
        {
            <tr>
                <td>@category.Name</td>
                <td>
                    <button @onclick="() => ShowSubcategories(category)" class="btn btn-primary">Show/hide subcategories</button>
                </td>
                <td>
                    <button @onclick="() => DeleteCategory(category.Id)" class="btn btn-danger">Delete</button>
                </td>
            </tr>
            if (selectedCategory == category)
            {
                @foreach (var subCategory in subCategories)
                {
                    <tr class="table-active">
                        <td>@subCategory.Name</td>
                        <td><button @onclick="() => DeleteSubCategory(subCategory.Id)" class="btn-danger">Delete</button></td>
                        <td> </td>
                    </tr>
                }
                <tr class="table-active">

                    <td>
                        <input placeholder="New subcategory" @bind="newSubcategoryName" />
                        <button @onclick="AddSubCategory">Add</button>
                    </td>
                    <td></td>
                    <td />
                </tr>
            }
        }
        <tr>
            <td>
                <input placeholder="New category" @bind="newCategoryName" />
                <button @onclick="AddCategory">Add</button>
            </td>
            <td />
            <td />
        </tr>
    </tbody>
</table>





@code {
    private IEnumerable<Category> categories = new List<Category>();
    private IEnumerable<Subcategory> subCategories = new List<Subcategory>();
    private Category selectedCategory;
    private string newCategoryName;
    private string newSubcategoryName;

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            await GetCategoriesAsync();
            this.StateHasChanged();
        }
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            await _data.AddCategory(newCategoryName);
            newCategoryName = string.Empty;

            await GetCategoriesAsync();
            this.StateHasChanged();
        }
    }

    public async Task GetCategoriesAsync()
    {
        categories = await _data.GetCategories();
    }

    public async Task DeleteCategory(int id)
    {
        await _data.DeleteCategory(id);
        await GetCategoriesAsync();
        this.StateHasChanged();
    }

    public async Task ShowSubcategories(Category category)
    {
        if (selectedCategory == category)
        {
            selectedCategory = null;
            this.StateHasChanged();
            return;
        }
        selectedCategory = category;
        await GetSubCategoriesAsync();
    }

    public async Task GetSubCategoriesAsync()
    {
        subCategories = selectedCategory.Subcategories;
        //subCategories = await _data.GetSubCategoriesFor(selectedCategory.Id);
        this.StateHasChanged();
    }

    private async Task AddSubCategory()
    {
        if (!string.IsNullOrWhiteSpace(newSubcategoryName))
        {
            var subCategory = new Subcategory()
            {
                Name = newSubcategoryName,
                CategoryId = selectedCategory.Id
            };
            await _data.AddSubCategory(subCategory);
            newSubcategoryName = string.Empty;

            await GetSubCategoriesAsync();
        }
    }

    public async Task DeleteSubCategory(int id)
    {
        await _data.DeleteSubCategory(id);
        await GetSubCategoriesAsync();
        this.StateHasChanged();
    }
}
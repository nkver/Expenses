@page "/Transactions"
@using Domain.Models;
@using Expenses.Pages.Components;
@using Domain.Interfaces;
@using Expenses.Domain.Options;
@inject IAccountDataService _accountService;
@inject ICategoryDataService _categoryService;
@inject ITransactionDataService _transactionService;

<h1> CSV Reader </h1>
<label>
    Selecteer de rekening:
    <select id="Account" @onchange="SetAccount">
        @foreach (var account in @_accounts)
        {
            <option value="@account.Iban"> @account.DisplayName </option>
        }
    </select>
</label>

<p> Current transactions for account: @_selectedAccount.Transactions.Count() </p>


<Upload Parent="instanceReference"></Upload>


<table class="table">

    <thead>

        <tr>

            <th> Datum </th>
            <th> Naam </th>
            <th> Omschrijving </th>
            <th> Tegenrekening </th>
            <th> Bedrag </th>
            <th> Categorie </th>
            <th> Subcategorie </th>

        </tr>

    </thead>

    <tbody>
        @foreach (var transaction in _selectedAccount.Transactions)
        {
            <tr>
                <td> @transaction.Date </td>
                <td> @transaction.Description </td>
                <td> @transaction.Comments </td>
                <td> @transaction.IbanTo </td>
                <td> @transaction.Amount </td>
                <td>
                    <select id="Categories" @onchange="@(e => SetCategory(e, transaction))">
                        @if (@transaction.Category != null)
                        {
                            <option value="@transaction.Category.Id"> @transaction.Category.Name </option>
                        }

                        <option />

                        @foreach (var category in @_categories)
                        {
                            <option value="@category.Id"> @category.Name </option>
                        }
                    </select>
                </td>
                <td>
                    <select id="Subcategories" @onchange="@(e => SetSubcategory(e, transaction))">
                        @if (@transaction.Category != null)
                        {
                            @if (@transaction.Subcategory != null)
                            {
                                <option value="@transaction.Subcategory.Id"> @transaction.Subcategory.Name </option>

                            }
                            <option />
                            @if (@transaction.Category.Subcategories != null)
                            {
                                @foreach (var subcategory in @transaction.Category.Subcategories)
                                {
                                    <option value="@subcategory.Id"> @subcategory.Name </option>
                                }
                            }
                        }
                    </select>
                </td>
            </tr>
        }

    </tbody>
</table>



@code {

    public Transactions instanceReference;
    private IEnumerable<Account> _accounts;
    private IEnumerable<Category> _categories;
    internal Account _selectedAccount;
    private string _selectedAccountIban;
    private Category _selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        instanceReference = this;

        GetAccounts();
        GetCategoriesAsync();
    }

    void GetAccounts()
    {
        _accounts = _accountService.GetAllAccounts();
        GetAccount();
    }

    void GetCategoriesAsync()
    {
        _categories = _categoryService.GetCategories();
    }

    void SetAccount(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            _selectedAccountIban = (string)e.Value;
            GetAccount();
        }
    }

    void GetAccount()
    {
        _selectedAccount = _selectedAccountIban == null
            ? _accounts.First(x => x.Type.Equals(AccountType.Checking))
            : _accounts.First(x => x.Iban.Equals(_selectedAccountIban));
        this.StateHasChanged();
    }

    public void UpdateState()
    {
        this.StateHasChanged();
    }


    public void SetCategory(ChangeEventArgs e, Transaction transaction)
    {
        var value = !string.IsNullOrEmpty(e.Value.ToString())
            ? _categories.FirstOrDefault(x => x.Id == int.Parse(e.Value.ToString()))
            : null;

        transaction.SetCategory(value);
        transaction.SetSubCategory(null);

        UpdateTransaction(transaction);
    }

    public void SetSubcategory(ChangeEventArgs e, Transaction transaction)
    {
        var value = !string.IsNullOrEmpty(e.Value.ToString())
            ? transaction.Category.Subcategories.FirstOrDefault(x => x.Id == int.Parse(e.Value.ToString()))
            : null;

        transaction.SetSubCategory(value);

        UpdateTransaction(transaction);
    }

    void UpdateTransaction(Transaction transaction)
    {
        _transactionService.UpdateTransaction(transaction);

        GetAccounts();
    }

}
